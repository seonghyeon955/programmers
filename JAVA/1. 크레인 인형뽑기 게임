https://programmers.co.kr/learn/courses/30/lessons/64061
게임개발자인 죠르디는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.
죠르디는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.
게임 화면은 1 x 1 크기의 칸들로 이루어진 N x N 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. 

게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 
크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.

[제한사항]
board 배열은 2차원 배열로 크기는 5 x 5 이상 30 x 30 이하입니다.
board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.
0은 빈 칸을 나타냅니다.
1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.
moves 배열의 크기는 1 이상 1,000 이하입니다.
moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.


정리 : 
크레인을 작동하면 해당 라인의 가장 상위에 있는 인형이 무조건 뽑히고, (만약 해당 라인에 인형이 하나도 없으면 아무것도 뽑지 않는다)
인형은 바구니에 담는다. 이 때 인형이 연속으로 2개 있으면 터져서 사라진다.
뽑기판 board이 주어지고 뽑는 라인의 순서인 moves이 주어질 때,
터져서 사라진 인형의 갯수를 구해야한다.

답:

import java.util.Stack;

public class Solution {
    public int solution(int[][] board, int[] moves) { //[][]board= 인형이 들어있는 뽑기판, []moves = 뽑는라인순서
        Stack<Integer>stack = new Stack<Integer>(); //인형을 넣을 스텍
        stack.push(0); //stack의 모든칸에 0을 넣어 staxk의 맨위 값과 비교할때 아무것도 없으면 오류가 나는 상황을 피한다.
        int answer = 0; //터져서 사라진 인형의 갯수
        for(int move : moves){ //moves 배열 안 숫자를 int형 변수 move의 형태로 하나씩 추출하여 나타낸다.
          for(int j=0; j<board.length; j++){//뽑기판의 길이만큼 반복
            if(board[j][move-1] != 0){//뽑기판의 해당 칸에 인형이 들어있을때(인형이 stack꼭대기 인형과 일치하는/불일치하는 두가지 경우로 나뉨)
              if(stack.peek() == board[j][move-1]){ //일치하는 경우
                stack.pop();//터뜨리고 
                answer += 2; //터져 사라진 인형 갯수 2개 추가
              }else{//불일치 하는 경우
                stack.push(board[j][move-1);//stack에 쌓기.
              }
              //뽑기판의 해당 칸에 인형이 들어있지 않는 경우
              board[j][move-1] =0;
              break; //인형이 없으므로 넘어간다.
            }
          }
        }
        return answer;
    }
}
