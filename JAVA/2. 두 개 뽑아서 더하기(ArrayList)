https://programmers.co.kr/learn/courses/30/lessons/68644
정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.

제한사항
numbers의 길이는 2 이상 100 이하입니다.
numbers의 모든 수는 0 이상 100 이하입니다.

입출력 예
numbers	result
[2,1,3,4,1]	[2,3,4,5,6,7]
[5,0,2,7]	[2,5,7,9,12]
입출력 예 설명
입출력 예 #1

2 = 1 + 1 입니다. (1이 numbers에 두 개 있습니다.)
3 = 2 + 1 입니다.
4 = 1 + 3 입니다.
5 = 1 + 4 = 2 + 3 입니다.
6 = 2 + 4 입니다.
7 = 3 + 4 입니다.
따라서 [2,3,4,5,6,7] 을 return 해야 합니다.
입출력 예 #2

2 = 0 + 2 입니다.
5 = 5 + 0 입니다.
7 = 0 + 7 = 5 + 2 입니다.
9 = 2 + 7 입니다.
12 = 5 + 7 입니다.
따라서 [2,5,7,9,12] 를 return 해야 합니다.

답)
[java]

import java.util.ArrayList;
import java.util.Arrays;

public class Solution{
  public static int solution(int[] numbers){
    ArrayList<Integer> arr = new ArrayList<Integer>();
    
    for(int i=0; i<numbers.length; i++){ //주어진 넘버스 배열의 길이만큼 도는 for문
      for(int j= i+1 ; j<numbers.length; j++){ //j는 항상 i의 바로 옆자리 수에서부터 시작하여 +1을 해가며 계산을 마칠 수 있다.
          int a = numbers[i] + numbers[j];
          if(arr.indexOf(a) < 0){ //ArrayList.indexOf()는 해당 객체가 존재할때는 그 인덱스자체를/ 존재하지 않을떈 -1을 리턴
            arr.add(a); //중복을 피하기 위해 존재하지 않는 경우에만 리스트에 추가하도록 한다.
          }//if end
      }//j for end
    }// i for end
    
    int[] answer = new int[arr.size];
    for(int i=0; i<arr.size; i++){//리스트의 길이는 length가 아닌 size로 조회가능하다.
      answer[i] = arr.get(i);//ArrayList.get() : 리스트에서 어떤 객체를 가져오는데 사용되는 메소드
    }
    Array.sort(answer); //리스트 정렬
    return answer;
  }
}

**ArrayList란 배열에서 발전된 형태.
배열은 인덱스를 다 채우거나 인덱스를 다 못채우는 경우가 있는데 이경우 
인덱스가 다 찼다면 더이상 값을 넣지 못하고 인덱스가 남으면 메모리가 낭비된다.
이러한 문제를 해결하기 위해 제공되는 클래스로, '배열의 크기를 임의로 변화시킬 수 있고', '리스트에 들어갈 타입을 사용자가 직접 설정 가능하다.'


-ArrayList의 메소드
**add(Object elem) 객체 매개변수 목록에 추가
remove(int index) index매개변수로 지정한 위치에 있는 객체 제거
renove(Object elem) 주어진 객체가 list에 있을경우 객체 제거
contains(Object elem) 객체 매개변수 elem에 매치되는 것이 있을시 참 리턴
**isEmpty() 목록에 아무 원소도 없을시 참 리턴
**indexOf(Object emel) 객체 매개변수 elem의 인덱스(있을경우) 또는 -1(없을경우) 리턴
size() 현재 목록에 들어있는 원소 갯수 리턴
**get(int index) 주어진 인덱스 매개변수 위치에 있는 객체 리턴 

