수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.

마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.

제한사항
마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.
completion의 길이는 participant의 길이보다 1 작습니다.
참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.
참가자 중에는 동명이인이 있을 수 있습니다.

입출력 예
participant	completion	return
[leo, kiki, eden]	[eden, kiki]	leo
[marina, josipa, nikola, vinko, filipa]	[josipa, filipa, marina, nikola]	vinko
[mislav, stanko, mislav, ana]	[stanko, ana, mislav]	mislav
입출력 예 설명
예제 #1
leo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.

예제 #2
vinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.

예제 #3
mislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.


풀이)

//완주하지 못한 자 = participant 배열엔 존재, completion 배열엔 존재하지 않는 사람을 찾는다

import java.util.*;

public class Solution{
  public String Solution(String participant[], String completion[]){
    Array.sort(participant);//배열 순서대로 정렬
    Array.sort(completion);
    
    for(int i=0; i<completion.length; i++){ //completion이 아닌 participant의 길이만큼 돌릴경우 Array.OutOfBounds 발생.
      if(!participant[i].equals(completion[i])){ //참가자와 완주자의 배열을 비교해서 서로 다른 값일때(참가자엔 있으나 완주자 배열에 없는 사람)
        return participant[i]; // = 미완주자
      }
    }//for문 end
    return participant[i]; //=미완주자. if문의 조건에서 걸리지 않은 경우가 있을때(=배열의 마지막값인 경우) 여기서 리턴해준다
  }
}


** 리턴 타입이 있는 함수는 한번만 리턴을 하며, 리턴시 함수는 종료된다.
** Array.sort : 배열의 오름차순 정리 
    Array.sort(배열이름,Collections.reversOrder()) : 배열의 내림차순 정리
** Array.equals() : 배열의 비교
